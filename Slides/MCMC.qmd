---
title: "MCMC"
author: "Jesse Brunner"
format: 
  revealjs:
    embed-resources: true
    fig-height: 3.5
    
execute: 
  echo: false
---
```{r}
#| include: false

# library(rethinking)
```

## Motivation for MCMC

Many models are too complex for quadratic approximation or other short cuts.

We need a general method of numeric integration to explore the posterior effectivly.

MCMC $\lim_{t\to\infty}$ posterior

## What's in a name? Markov chain Monte Carlo

Monte Carlo: "repeated random sampling to obtain numerical results" -wikipedia

Markov chain: stochastic model in which state at time $t$ depends only on previous state at $t-1$

## Imagine a posterior {.smaller}

```{r}
posterior <- function(x){
  10*dlnorm(x, meanlog=3, sdlog=1.5)*dnorm(x,mean=3, sd=2)
}
proposal <- function(x){
  dnorm(x, 0,1.2)/20
}
```


```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
```
Imagine this one-dimensional posterior

*  The x-axis is our parameter, $\theta$. 
*  The y-axis is the posterior probability.

## Imagine a posterior {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
```

Imagine this one-dimensional posterior:

*  The x-axis is our parameter, $\theta$. 
*  The y-axis is the posterior probability.
     - actually, is _proportional_ to the posterior
     - we don't know the probability of the data, $\text{Pr}(x)$.

## Step 1 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
arrows(x0=1.9, y0=0, y1=0.01, length=1/10, col="red", code = 1)
```

Imagine we take a guess for $\theta$
This is the first step of our (Markov) chain

## Step 1 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="red")
points(x=1.9, y=posterior(1.9), col="red")
```

We can then find the _height_ for this guess

height =  likelihood of data given $\theta$ $\times$ prior of $\theta$  
= $\text{Pr}(x|\theta) \times \text{Pr}(\theta)$.


## Step 2 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
points(x=1.9, y=posterior(1.9), col="grey")
xs <- seq(-2.5,2.5, length.out=50)
points(x=xs+1.9, 
       y=proposal(xs), 
       type="l", col="blue")
```

Choose a _proposal_ for a new value on the chain.
  - Our proposal distribution is centered on our last guess. 
  - Can be any _symmetric_ shape.

## Step 2 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
points(x=1.9, y=posterior(1.9), col="grey")
xs <- seq(-2.5,2.5, length.out=50)
points(x=xs+1.9, 
       y=proposal(xs), 
       type="l", col="blue")
arrows(x0=2.5, y0=0, y1=0.01, length=1/10, col="red", code = 1)
```



## Step 2 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
points(x=1.9, y=posterior(1.9), col="grey")
xs <- seq(-2.5,2.5, length.out=50)

segments(x0=2.5, y0=0, y1=posterior(2.5), col="red")
points(x=2.5, y=posterior(2.5), col="red")
```

Find height (posterior-ish value) for our _proposal_


## Step 3 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
points(x=1.9, y=posterior(1.9), col="grey")
xs <- seq(-2.5,2.5, length.out=50)

segments(x0=2.5, y0=0, y1=posterior(2.5), col="red")
points(x=2.5, y=posterior(2.5), col="red")
```

Calculate the ratio of those heights: 
$$
r = \frac{\text{Pr}(x|\theta_p)\text{Pr}(\theta_p)}{\text{Pr}(x|\theta)\text{Pr}(\theta)} = \frac{`r round(posterior(2.5),3)`}{`r round(posterior(1.9),3)`} = `r round(posterior(2.5)/posterior(1.9),3)`
$$

## Why ratios are clever {.smaller}

We _want_ to calculate the ratio of posterior probabilities: 

$$
r = \frac{\text{Pr}(\theta_p | x)}{\text{Pr}(\theta_{t-1} | x)} = \frac{\frac{\text{Pr}(x|\theta_p)\text{Pr}(\theta_p)}{\text{Pr}(x)}}{\frac{\text{Pr}(x|\theta_{t-1})\text{Pr}(\theta_{t-1})}{\text{Pr}(x)}} 
$$
but we do not know (and cannot calculate) $\text{Pr}(x)$. 

However, they cancel out! We just need the numerators!
$$
r = \frac{\text{Pr}(\theta_p | x)}{\text{Pr}(\theta_{t-1} | x)} = \frac{\text{Pr}(x|\theta_p)\text{Pr}(\theta_p)}{\text{Pr}(x|\theta)\text{Pr}(\theta)} 
$$
## Step 3 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
points(x=1.9, y=posterior(1.9), col="grey")
xs <- seq(-2.5,2.5, length.out=50)

segments(x0=2.5, y0=0, y1=posterior(2.5), col="red")
points(x=2.5, y=posterior(2.5), col="red")
```

Choose a random uniform variable, $U \sim \text{Uniform}(0,1)$

If $r > U$, accept the proposal & add it to the chain

## Repeat steps 2 & 3 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
segments(x0=2.5, y0=0, y1=posterior(2.5), col="grey")
points(x=2.5, y=posterior(2.5), col="grey")
points(x=xs+2.5, 
       y=proposal(xs), 
       type="l", col="blue")

```

## Repeat steps 2 & 3 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
segments(x0=2.5, y0=0, y1=posterior(2.5), col="grey")
points(x=2.5, y=posterior(2.5), col="grey")
points(x=xs+2.5, 
       y=proposal(xs), 
       type="l", col="blue")
arrows(x0=4.2, y0=0, y1=0.01, length=1/10, col="red", code = 1)
```


## Repeat steps 2 & 3 {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
segments(x0=2.5, y0=0, y1=posterior(2.5), col="grey")
points(x=2.5, y=posterior(2.5), col="grey")
# points(x=xs+2.5, 
#        y=proposal(xs), 
#        type="l", col="blue")
segments(x0=4.2, y0=0, y1=posterior(4.2), col="red")
points(x=4.2, y=posterior(4.2), col = "red")
```

$$
r = \frac{`r round(posterior(4.2),3)`}{`r round(posterior(2.5),3)`} = `r round(posterior(4.2)/posterior(2.5),3)` ; U = 0.89
$$ 

Since $r < U$, reject proposal & keep the current position.

## One more time {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
segments(x0=2.5, y0=0, y1=posterior(2.5), col="grey")
points(x=2.5, y=posterior(2.5), col="grey")
points(x=xs+2.5, 
       y=proposal(xs), 
       type="l", col="blue")
arrows(x0=3.1, y0=0, y1=0.01, length=1/10, col="red", code = 1)
```

## One more time {.smaller}

```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
segments(x0=2.5, y0=0, y1=posterior(2.5), col="grey")
points(x=2.5, y=posterior(2.5), col="grey")
# points(x=xs+2.5, 
#        y=proposal(xs), 
#        type="l", col="blue")
segments(x0=3.1, y0=0, y1=posterior(3.1), col="red")
points(x=3.1, y=posterior(3.1), col="red")
```

$$
r = \frac{`r round(posterior(3.1),3)`}{`r round(posterior(2.5),3)`} = `r round(posterior(3.1)/posterior(2.5),3)` 
$$
$U=0.212$

Accept proposal & add to chain 

## Chain so far {.smaller}

```{r}

theta = c(1.9, 2.5, 2.5, 3.1)
plot(theta, 
     type="b", 
     xlab="step or iteration", 
     ylab=expression(theta), 
     ylim=c(1, 4))
```

## Chain after a while {.smaller}

```{r}
x <- seq(0, 8, length.out=1000)
theta <- c(theta, sample(x, size=500, prob=posterior(x)))
plot(theta, 
     type="b", 
     xlab="step or iteration", 
     ylab=expression(theta))
```

## Turn it on it's side {.smaller}

```{r}
hist(theta, breaks = 30, xlab=expression(theta))
```

It works!

This is the **Metropolis Algorithm**

## Did you catch the problem? {.smaller}


```{r}
curve(posterior, 
      from=-1, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
segments(x0=2.5, y0=0, y1=posterior(2.5), col="grey")
points(x=2.5, y=posterior(2.5), col="grey")
segments(x0=3.1, y0=0, y1=posterior(3.1), col="grey")
points(x=3.1, y=posterior(3.1), col="grey")
segments(x0=1.1, y0=0, y1=posterior(1.1), col="grey")
points(x=1.1, y=posterior(1.1), col="grey")
points(x=xs+1.1,
       y=proposal(xs),
       type="l", col="blue")
segments(x0=3.1, y0=0, y1=posterior(3.1), col="grey")
points(x=3.1, y=posterior(3.1), col="grey")
arrows(x0=-0.5, y0=0, y1=0.01, length=1/10, col="red", code = 1)

```

What if we get proposals outside of possible boundaries?

-  lots of rejections
-  inefficient sampling

## Solution: asymmetric proposal distribution {.smaller}

```{r}
proposal2 <- function(x, mu){
  dlnorm(x, log(mu), log(2))/20
}
xs <- seq(0, 10, length.out=500)
```


```{r}
curve(posterior, 
      from=0, to=10, 
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
segments(x0=1.9, y0=0, y1=posterior(1.9), col="grey")
segments(x0=2.5, y0=0, y1=posterior(2.5), col="grey")
segments(x0=3.1, y0=0, y1=posterior(3.1), col="grey")
segments(x0=1.1, y0=0, y1=posterior(1.1), col="grey")
points(x=1.1, y=posterior(1.1), col="grey")
points(x=xs,
       y=proposal2(xs, 1.1),
       type="l", col="blue")
arrows(x0=0.5, y0=0, y1=0.01, length=1/10, col="red", code = 1)

```

However, proposal distribution is $a$symmetric:

$$
\text{Pr}(\theta_{t-1} \rightarrow \theta_p) \neq \text{Pr}(\theta_{p} \rightarrow \theta_{t-1})
$$

## Metropolis-Hastings algorithm

Adjust the ratio to:
$$
r = \frac{\text{Pr}(x|\theta_p)\text{Pr}(\theta_p)}{\text{Pr}(x|\theta_{t-1})\text{Pr}(\theta_{t-1})}\times \frac{\text{Pr}(\theta_{t-1}|\theta_p)}{\text{Pr}(\theta_p|\theta_{t-1})}
$$

and it works!

## But... higher dimensional problems

```{r}
u <- runif(1000,0,1) 
v <- runif(1000,0,1) 
theta <- 2 * pi * u 
phi   <- acos(2 * v - 1) 
x <- sin(theta) * cos(phi) 
y <- sin(theta) * sin(phi) 
z <- cos(theta) 
library("lattice") 
cloud(z ~ x + y)
```

Imagine a proposed jump from one of these points could easily be far from posterior density

-  Gets worse with higher N
-  Many to most proposals are rejected = inefficient

## Solution: HMC {.smaller}

**Hamiltonian Monte Carlo**

- pretends the (negative-log) posterior is a surface 
- simulates a ball rolling along that
- produces proposals informed by topography
- otherwise like Metropolis-Hastings

## HMC {.smaller}

First, take the negative log, so high probability = low areas
```{r}
curve(posterior, 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(Pr(x~"|"~theta)~Pr(theta)))
```

## HMC {.smaller}

First, take the negative log, so high probability = low areas
```{r}
curve(-log(posterior(x)), 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(-log(Pr(x~"|"~theta)~Pr(theta))))
```

## HMC {.smaller}

```{r}
curve(-log(posterior(x)), 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(-log(Pr(x~"|"~theta)~Pr(theta))))
points(0.5, -log(posterior(0.5)) +0.1, pch=16, col = "red") 
```

Take the first guess 


## HMC {.smaller}

```{r}
curve(-log(posterior(x)), 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(-log(Pr(x~"|"~theta)~Pr(theta))))
points(0.5, -log(posterior(0.5)) +0.1, pch=16, col = "red") 
arrows(x0=0.5, x1=0, y0=-log(posterior(0.5)) +0.1, length=1/10, col="red")
```

...and give it a bit of momentum (in a direction of parameter space)

## HMC {.smaller}

```{r}
curve(-log(posterior(x)), 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(-log(Pr(x~"|"~theta)~Pr(theta))))
points(0.5, -log(posterior(0.5)) +0.1, pch=16, col = rgb(1,0,0, 0.25)) 
points(0.38, -log(posterior(0.38)) +0.1, pch=16, col = rgb(1,0,0, 0.4)) 
points(0.3, -log(posterior(0.3)) +0.1, pch=16, col = rgb(1,0,0, 0.6)) 
points(0.23, -log(posterior(0.23)) +0.1, pch=16, col = rgb(1,0,0, 0.8))
points(0.18, -log(posterior(0.18)) +0.1, pch=16, col = rgb(1,0,0, 1))

```

Track it's movement for a certain amount of "time" using Hamiltonian equations 

$$
\text{Total Energy} = \text{Kinetic} + \text{Momentum}
$$

After a bit of time, point at end is the new proposal

- Proposals tend to be in areas with higher probability density

### HMC {.smaller}
```{r}
curve(-log(posterior(x)), 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(-log(Pr(x~"|"~theta)~Pr(theta))))
points(c(0.18,0.6,0.85,1.2,1.6,2.2,3.2,3.6,4),
       -log(posterior(c(0.18,0.6,0.85,1.2,1.6,2.2,3.2,3.6,4))) +0.1, pch=16, col = rgb(1,0,0, 2:10/10))
```

### HMC {.smaller}
```{r}
curve(-log(posterior(x)), 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(-log(Pr(x~"|"~theta)~Pr(theta))))
points(0.18, -log(posterior(0.18)) +0.1, pch=16, col = rgb(1,0,0, 1))
points(0.18, -log(posterior(0.18)) +0.1, pch=16, col = rgb(1,0,0, 1))
```


## HMC details {.smaller}

No analytic solution to Hamiltonian for most problems, so:

- solve it numerically over a series of steps (**Leapfrog algorithm**)
    
```{r}
curve(-log(posterior(x)), 
      from=0, to=10, n=1001,
      xlab=expression(theta), 
      ylab=expression(-log(Pr(x~"|"~theta)~Pr(theta))))
points(c(0.18,0.6,0.85,1.2,1.6,2.2,3.2,3.6,4),
       -log(posterior(c(0.18,0.6,0.85,1.2,1.6,2.2,3.2,3.6,4))) + 0.05*((-1)^(1:9)), pch=16, col = "red", type="b")

```

## HMC details {.smaller}

No analytic solution to Hamiltonian for most problems, so:

- solve it numerically over a series of steps (**Leapfrog algorithm**)
- Stan will tune step size and number of leapfrog steps
    - too many steps and we end up at the bottom, every time
    - too coarse and we don't follow the posterior
- Energy at start and end _should_ be the same if we followed posterior surface
    -  gives a warning if these **diverge** 

Overall, each proposal requires many more calculations (many steps, calculating kinetic energy & momentum at each), but proposals are much better / rarely rejected, so much more efficient overall